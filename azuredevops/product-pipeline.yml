trigger:
  paths:
    include:
      - app/product-service/**

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: 'k8s-dev'
- name: chartName 
  value: 'storehelmchart'
- name: imageTag
  value: $(Build.BuildId)
- name: imageName
  value: 'product'
  
stages:
  - stage: Build
    displayName: Build and Publish
    jobs:
      - job: BuildPublishDockerImages
        displayName: Build Publish Docker Images
        steps:
          - task: DockerInstaller@0
            displayName: Install Docker
            inputs:
              dockerVersion: '17.09.0-ce'

          - template: appTemplates/build.yml
            parameters:
              acrServiceConnection: $(acrServiceConnection)
              imageName: $(imageName)
              dockerFilePath: '$(Build.sourcesdirectory)/app/product-service/Dockerfile'
              tag: $(imageTag)

          - task: PublishPipelineArtifact@1
            displayName: Publish Manifest
            inputs:
              artifactName: $(chartName)
              path: $(chartName)

  - stage: Deploy
    jobs:
    - deployment: DeployAKS
      displayName: Deploy AKS
      environment: $(environment)
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: $(chartName)

              - script: |
                  echo "Workspace Directory: $(Pipeline.Workspace)"
                  ls -R "$(Pipeline.Workspace)"

              - task: AzureCLI@2
                displayName: Get AKS Credentials
                inputs:
                  azureSubscription: $(serviceConnection)
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    echo "Getting AKS credentials..."
                    az aks get-credentials --name $(aksCluster) --resource-group $(aksResourceGroup) --overwrite-existing

                    echo "Updating image tag in values.yaml..."
                    sed -i 's/\(tag:\s*\).*/\1$(imageTag)/' $(Pipeline.Workspace)/$(chartName)/product/values.yaml
                    echo "Updated values.yaml:"
                    cat $(Pipeline.Workspace)/$(chartName)/product/values.yaml

              - task: HelmDeploy@1
                displayName: Helm Upgrade/Install
                inputs:
                  connectionType: 'Azure Resource Manager'
                  azureSubscription: $(serviceConnection)
                  azureResourceGroup: $(aksResourceGroup)
                  kubernetesCluster: $(aksCluster)
                  namespace: $(namespace)
                  command: upgrade
                  chartType: FilePath
                  chartPath: '$(Pipeline.Workspace)/$(chartName)/product'
                  releaseName: 'product'
                  install: true
                  waitForExecution: false                  